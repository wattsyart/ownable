@page "/"
@inherits WalletComponent
@inject EventService EventService

<PageTitle>Ownable</PageTitle>

@if (Contracts != null)
{
    <h2>Indexed Contracts</h2>
    <ul>
        @foreach (var item in Contracts)
        {
            <li>@item.Name</li>
        }
    </ul>
}

@if (Received != null)
{
    <h2>Tokens Received</h2>
    <ul>
        @foreach (var item in Received)
        {
            <li>@item.ContractAddress: @item.TokenId at @item.BlockNumber</li>
        }
    </ul>
}

@code
{
    private List<Contract>? Contracts { get; set; }
    private List<Received>? Received { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        HostProvider.SelectedAccountChanged += OnSelectedAccountChanged;

        Contracts = await Http.GetFromJsonAsync<List<Contract>>("contracts");
    }

    private async Task OnSelectedAccountChanged(string account)
    {
        Logger?.LogInformation("Account changed to {Account}", account);
        var web3 = await HostProvider.GetWeb3Async();

        var fromBlock = BlockParameter.CreateEarliest();
        var toBlock = BlockParameter.CreateLatest();
        var received = await EventService.GetReceivedTokensAsync<ERC721.Transfer>(web3, account, fromBlock: fromBlock, toBlock: toBlock, logger: Logger);
        Received = received.ToList();

        Logger?.LogInformation("Found {Count} received tokens from {FromBlock} to {ToBlock}", Received?.Count, fromBlock.BlockNumber, toBlock.BlockNumber);
    }

    public override void Dispose()
    {
        base.Dispose();

        HostProvider.SelectedAccountChanged -= OnSelectedAccountChanged;
    }
}
