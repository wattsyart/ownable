@page "/"
@inherits WalletComponent
@inject TokenService TokenService

<PageTitle>Ownable</PageTitle>

<form class="card card-sm">
    <div class="card-body row no-gutters align-items-center">
        <div class="col-auto">
            <i class="oi oi-magnifying-glass h4 text-body"></i>
        </div>
        <div class="col">
            <input @bind-value="@Address" class="form-control form-control-lg form-control-borderless" type="search" placeholder="Enter a contract address">
        </div>
        <div class="col-auto">
            <button @onclick="OnSearchClicked" @onclick:preventDefault="true" @onclick:stopPropagation="true" class="btn btn-lg btn-success">Search</button>
        </div>
    </div>
</form>

@if (Contract != null)
{
    <h2>@Contract.Name (@Contract.Symbol)</h2>

    if (ContractTokens != null)
    {
        foreach (var token in ContractTokens)
        {
            <div class="card card-sm">
                @token.TokenId
            </div>
        }
    }
}

<style>
    .form-control-borderless {
        border: none;
    }

    .form-control-borderless:hover, .form-control-borderless:active, .form-control-borderless:focus {
        border: none;
        outline: none;
        box-shadow: none;
    }
</style>

@code
{
    public Contract? Contract { get; set; }
    public List<Received>? ContractTokens { get; set; }
    public string? NextPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        HostProvider.SelectedAccountChanged += OnSelectedAccountChanged;
    }

    private Task OnSelectedAccountChanged(string account)
    {
        Logger?.LogInformation("Account changed to {Account}", account);
        return Task.CompletedTask;
    }

    public override void Dispose()
    {
        base.Dispose();

        HostProvider.SelectedAccountChanged -= OnSelectedAccountChanged;
    }

    [Parameter]

    public string? Address { get; set; }

    private async Task OnSearchClicked()
    {
        if (!string.IsNullOrWhiteSpace(Address) && HostProvider.Available)
        {
            Logger?.LogInformation("Fetching collection...");

            var web3 = await HostProvider.GetWeb3Async();
            var fromBlock = BlockParameter.CreateEarliest();
            var toBlock = BlockParameter.CreateLatest();

            var contract = new Contract();
            contract.Address = Address;
            contract.Name = await TokenService.TryGetNameAsync<ERC721.NameFunction>(web3, Address, ContractFeatures.SupportsName, toBlock);
            contract.Symbol = await TokenService.TryGetSymbolAsync<ERC721.SymbolFunction>(web3, Address, ContractFeatures.SupportsSymbol, toBlock);

            Contract = contract;

            if (Contract != null && !string.IsNullOrWhiteSpace(Contract.Address))
            {
                var page = await TokenService.GetMintedTokensAsync<ERC721.Transfer>(web3, contract.Address!, fromBlock, toBlock, CancellationToken.None, NextPage, Logger);
                ContractTokens = page.Value;
                NextPage = page.NextPage;
            }
        }
    }
}